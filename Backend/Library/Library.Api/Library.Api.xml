<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library.Api</name>
    </assembly>
    <members>
        <member name="M:Library.Api.Controllers.AuthController.Register(Library.Models.DTO.RegisterUserRequestDTO)">
            <summary>
            Registers a new user with the provided registration details.
            </summary>
            <param name="registerRequestDto">The request DTO containing the user's registration information.</param>
            <returns>An ActionResult containing an AuthResponseDTO with authentication details upon successful registration.</returns>
            <remarks>
            This endpoint allows the registration of a new user by processing the provided registration details.
            The registration request includes user-specific information such as email, password.
            Upon successful registration, the endpoint returns an authentication response DTO containing authentication details
            such as jwt access token, expiration time, and user information.
            </remarks>
            <param name="registerRequestDto">The request DTO containing the user's registration information.</param>
            <returns>An ActionResult containing an AuthResponseDTO with authentication details upon successful registration.</returns>
        </member>
        <member name="M:Library.Api.Controllers.AuthController.Login(Library.Models.DTO.LoginUserRequestDTO)">
            <summary>
            Logs in a user with the provided credentials.
            </summary>
            <param name="user">The request DTO containing the user's login credentials (email and password).</param>
            <returns>An ActionResult containing an AuthResponseDTO with authentication details upon successful login.</returns>
            <remarks>
            This endpoint allows a registered user to log in by providing their email and password.
            Upon successful login, the endpoint returns an authentication response DTO containing authentication details
            such as jwt access token, expiration time, and user information.
            </remarks>
            <param name="user">The request DTO containing the user's login credentials (email and password).</param>
            <returns>An ActionResult containing an AuthResponseDTO with authentication details upon successful login.</returns>
        </member>
        <member name="M:Library.Api.Controllers.AuthController.ChangePassword(Library.Models.DTO.UpdatePasswordRequestDTO)">
            <summary>
            Changes the password for the authenticated user.
            </summary>
            <param name="user">The request DTO containing the user's current password and new password.</param>
            <returns>An ActionResult containing an AuthResponseDTO with authentication details upon successful password change.</returns>
            <remarks>
            This endpoint allows an authenticated user to change their password by providing their current password and new password.
            Upon successful password change, the endpoint returns an authentication response DTO containing updated authentication details
            such as access token, expiration time, and user information.
            </remarks>
            <param name="user">The request DTO containing the user's current password and new password.</param>
            <returns>An ActionResult containing an AuthResponseDTO with authentication details upon successful password change.</returns>
        </member>
        <member name="M:Library.Api.Controllers.Base.BaseCrudController`5.GetAll(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Gets all records with optional filtering, sorting, and pagination.
            </summary>
            <param name="filterOn">The property to filter records on. Supports filtering by various formats:.  
            - Nested property filtering: Use syntax => {Property.NestedProperty}.  
            - Boolean property filtering: Exact value: true.  
            - String property filtering: Contains: "value".  
            - Date Time property filtering:.  
                * Exact date: =2022-01-01.  
                * Date greater than or equal to: &gt;=2022-01-01.  
                * Date less than or equal to: &lt;=2022-01-01.  
                * Dates between two dates: 2022-01-01~2022-01-02.  
            - Numeric property filtering:.  
                * Exact value: =42.  
                * Greater than or equal to: &gt;=100.  
                * Less than or equal to: &lt;=50.  
                * Range between two values: 10~20.  
            </param>
            <param name="filterQuery">The query string for filtering based on the specified property.</param>
            <param name="sortBy">The property to sort records by.</param>
            <param name="isAscending">Specifies the sort order (ascending or descending).</param>
            <param name="pageSize">The number of records to return per page (default is 10).</param>
            <param name="pageNumber">The page number to retrieve (default is 1).</param>
            <remarks>
            Supports various filtering formats, including nested properties, boolean values, string matching, date comparisons, and numeric comparisons.
            </remarks>
            <returns>All records matching the specified criteria.</returns>
        </member>
        <member name="M:Library.Api.Controllers.Base.BaseCrudController`5.GetOneAsync(System.Int32)">
            <summary>
            Gets a single record
            </summary>
            <param name="id">Primary key of the record</param>
            <returns>Single record</returns>
        </member>
        <member name="M:Library.Api.Controllers.Base.BaseCrudController`5.UpdateOneAsync(System.Int32,`3)">
            <summary>
            Updates a single record
            </summary>
            <param name="id">Primary key of the record to update</param>
            <param name="entity">Entity to update</param>
            <returns>Updated record</returns>
        </member>
        <member name="M:Library.Api.Controllers.Base.BaseCrudController`5.AddOneAsync(`2)">
            <summary>
            Adds a single record
            </summary>
            <param name="entity">Entity to add</param>
            <returns>Added record</returns>
        </member>
        <member name="M:Library.Api.Controllers.Base.BaseCrudController`5.DeleteOneAsync(System.Int32,Library.Models.DTO.Base.BaseDTO)">
            <summary>
            Deletes a single record
            </summary>
            <remarks>
            Sample body:
            <pre>
            {
              "Id": 1,
              "TimeStamp": "AAAAAAAAB+E="
            }
            </pre>
            </remarks>
            <returns>Success</returns>
        </member>
        <member name="M:Library.Api.Controllers.BookController.AddOneAsync(Library.Models.DTO.BookCreateRequestDTO)">
            <summary>
            Adds a single record
            </summary>
            <returns>Added record</returns>
        </member>
        <member name="M:Library.Api.Controllers.BookController.UpdateOneAsync(System.Int32,Library.Models.DTO.BookUpdateRequestDTO)">
            <summary>
            Updates a single record
            </summary>
            <param name="id">Primary key of the record to update</param>
            <param name="editedBookDto">Entity to update</param>
            <returns>Updated record</returns>
        </member>
        <member name="M:Library.Api.Controllers.BorrowingController.GetAll(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Gets all records with optional filtering, sorting, and pagination.
            </summary>
            <param name="filterOn">The property to filter records on. Supports filtering by various formats:.  
            - Nested property filtering: Use syntax => {Property.NestedProperty}.  
            - Boolean property filtering: Exact value: true.  
            - String property filtering: Contains: "value".  
            - Date Time property filtering:.  
                * Exact date: =2022-01-01.  
                * Date greater than or equal to: &gt;=2022-01-01.  
                * Date less than or equal to: &lt;=2022-01-01.  
                * Dates between two dates: 2022-01-01~2022-01-02.  
            - Numeric property filtering:.  
                * Exact value: =42.  
                * Greater than or equal to: &gt;=100.  
                * Less than or equal to: &lt;=50.  
                * Range between two values: 10~20.  
            </param>
            <param name="filterQuery">The query string for filtering based on the specified property.</param>
            <param name="sortBy">The property to sort records by.</param>
            <param name="isAscending">Specifies the sort order (ascending or descending).</param>
            <param name="pageSize">The number of records to return per page (default is 10).</param>
            <param name="pageNumber">The page number to retrieve (default is 1).</param>
            <remarks>
            Supports various filtering formats, including nested properties, boolean values, string matching, date comparisons, and numeric comparisons.
            </remarks>
            <returns>All records matching the specified criteria.</returns>
        </member>
        <member name="M:Library.Api.Controllers.BorrowingController.InitiateBorrowingAsync(Library.Models.DTO.PendingBorrowingRequestDTO)">
            <summary>
            Initiate a borrowing request for one or more books.
            </summary>
            <param name="userBorrowingRequest">The borrowing request containing the IDs of the books to be borrowed.</param>
            <returns>
            Either:
            - 201 (Created): The borrowing request was successfully created, and pending borrowing records were generated for the requested books.
            - 207 (Multi-Status): Some books were successfully requested for borrowing, while others encountered errors.
            - 400 (Bad Request): The request was invalid. Check the response body for details on the encountered errors.
            </returns>
            <remarks>
            This endpoint allows a user to initiate a borrowing request for one or more books by providing their IDs in the request payload.
            The response will indicate the outcome of the borrowing request:
            - If all requested books were successfully processed, a 201 (Created) status code will be returned along with the details of the pending borrowing records.
            - If some books were processed successfully while others encountered errors (e.g., due to unavailable or invalid book IDs), a 207 (Multi-Status) status code will be returned.
            - If the request payload was invalid or incomplete, a 400 (Bad Request) status code will be returned with details about the encountered errors.
            </remarks>
        </member>
        <member name="M:Library.Api.Controllers.BorrowingController.ActOnBorrowingStatusAsync(Library.Models.DTO.BorrowingStatusUpdateRequestDTO)">
            <summary>
            Handle one or more borrowings by performing actions like Approve, Reject, Cancel, Confirm, or Return.
            </summary>
            <param name="borrowingStatusUpdateRequest">The request containing the action to perform and the borrowing IDs to update.</param>
            <returns>
            Either:
            - 200 (OK): The borrowing actions were successfully performed, and the borrowing records have been updated.
            - 207 (Multi-Status): Some borrowing actions were successful, while others encountered errors. Check the response body for details.
            - 400 (Bad Request): The request was invalid. Check the response body for details on the encountered errors.
            </returns>
            <remarks>
            This endpoint allows performing various actions on one or more borrowing records:
            - Before approval/rejection by an admin:
              - Users can "Cancel" their borrowing requests.
              - Admins can "Approve" or "Reject" pending borrowing requests initiated by users.
            - After approval/rejection:
              - Users can "Confirm" that they received the requested book.
              - Admins can still "Reject" the request at this stage.
            - After the book is borrowed (user confirmed receipt):
              - Admins can "Return" the book.
            </remarks>
        </member>
        <member name="M:Library.Api.Controllers.UserController.UpdateOneAsync(System.Int32,Library.Models.DTO.UserUpdateRequestDTO)">
            <summary>
            Updates a single record
            </summary>
            <param name="id">Primary key of the record to update</param>
            <param name="entity">Entity to update</param>
            <returns>Updated record</returns>
        </member>
    </members>
</doc>
